  % TARJAN'S algorithm - ITERATIVE IMPLEMENTATION
  % GAIA SILVESTRI - APRIL 2014
  % input: a matrix whose nonzero cells indicate nonzero weight edges
  % output: set of strongly connected components 
  
  % Each vertex of the graph appears in exactly one of the strongly connected components. 
  % Any vertex that is not on a directed cycle forms a strongly connected component all by itself: 
  % for example, a vertex whose in-degree or out-degree is 0, or any vertex of an acyclic graph.
  
  nruns=1;
  total=zeros(nruns,1);
  totalsingles=zeros(nruns,1);
  check1=0; 
  for d=1:nruns
    
  %{
  %start internal large matrix like izhikevic
  neur=1000;                  % tot. # of neurons
  n=neur*neur;
  
  S3=[0.5*rand(neur,800), -rand(neur,200)];
  
  for i=1:neur
      for k=1:neur
          
          
          if rand>0.35 || i==k
              S3(i,k)=0;
              check1=check1+1;
          end
          
      end
  end
  REAL=S3;
  %endlargetest
  %}
  
  %{
  %test matrix (small enough for manual testing)
  S3=[0,1,0,0,1,0;
      0,0,1,0,0,0;
      1,0,0,0,0,1;
      1,0,0,0,0,0;
      0,0,0,1,0,0;
      0,0,0,0,0,0];
  neur=6;
  n=neur*neur;
  REAL=S3;
  %end test matrix 
  %}
      
  
  %when using an outsider matrix S3, make that S3 and run this program after
  neur=1000;
  n=neur*neur;
  REAL=S3;                 % matrix of synapses as input
  %endoutsider
  
      
  
  %start ZOOM 
  % let the algorithm process r 1:neur/2 and c 1:neur/2
  neur=10;
  n=neur*neur;
  ZOOM=zeros(neur,neur);
   for i=1:neur
      for k=1:neur
          
         ZOOM(i,k)=S3(i,k);
          
      end
  end
  REAL=ZOOM;
  %endzoom
  

  index=1;                 % initialize index at 1 (first visited neuron will have index==1)

  j=1;                     % j points to first empty cell from the top in STACK
  q=1;                     % q points to the cell where you insert newly visited synapse

  STACK = cell(2,n);       % a cell array with 2 rows of size nxn (tot. # of synapses).
  
  INSTACK = zeros(1,neur); % if a neuron neur is in STACK, INSTACK(neur)>0
  ADDED =zeros(1,neur);    % if a neuron neur participates in a component, ADDED(neur)==1

  SUCCESSORS = cell(2,n);  % a stack containing all synapses visited in order, used for backtracking
  FLAG = zeros(1,neur);    % FLAG(neur)==1 if neuron neur has neighbors

  INDEX=zeros(1,neur);     % matrix that will store indexes for each synapse

  LOWLINK=zeros(1,neur);   % matrix that will store lowlink for each synapse
   
  CONTAINER=[];            % collection of all strongly connected components
  INTER={'/B';'/B'};       % indicates where a new component starts as they are concatenated (horzcat is the only way)
  totcomponents=0;
  
  totlonely=0;
    for r=1:neur
       %Each unvisited neuron is assigned a unique integer index, which numbers them in the order in which they are discovered
       if INDEX(r)== 0
            INDEX(r) = index;
            %lowlink represents the smallest index of any node known to be reachable from v, including v itself
            LOWLINK(r) = index;
            index = index + 1;
        for c=1:neur
           if ~(REAL(r,c) == 0)
            FLAG(r)=1;
               
                if INDEX(c)==0
                    %push synapse to stack STACK
                    STACK{1,j}= r; %row
                    STACK{2,j}= c; %column
                    j=j+1;         %points to current top+1
                    INSTACK(r)=INSTACK(r)+1; % updates how many times the neuron is in the STACK
                    SUCCESSORS{1,q}= r;
                    SUCCESSORS{2,q}= c;
                    q=q+1;
                    row=c;         %go to neighbors of REAL(r,c) which are in row #c
                while (true)
                    colindex=1;
                            
                    while colindex <= neur
                        
                        if INDEX(row)==0 % if neuron #row was never visited
                        
                                INDEX(row) = index;
                                LOWLINK(row) = index;
                                index = index + 1;
                        end
                        
                        if ~(REAL(row,colindex) == 0) %if this is a nonzero synapse
                            FLAG(row)=1;              %record that neuron #row has neighbors
                            
                            if INDEX(colindex) == 0
                                
                                %push synapse in STACK and SUCCESSORS
                                STACK{1,j}= row;
                                STACK{2,j}= colindex;
                                j=j+1; 
                                INSTACK(row)=INSTACK(row)+1; % records neuron #row's presence in stack
                                SUCCESSORS{1,q}= row;
                                SUCCESSORS{2,q}= colindex;
                                q=q+1;
                                %go to next descendant
                                row = colindex; 
                                colindex=0;  
                                
                                
                            else if INSTACK(colindex) > 0                           %if neuron #colindex is present in STACK
                                LOWLINK(row) = min(LOWLINK(row), INDEX(colindex));
                                 end
                            end
                            
                        end
                        colindex=colindex+1;
                        
                    end
                    
                    flag=0; 
                    
                    %if a cycle is detected pop it from STACK
                    if LOWLINK(row) == INDEX(row) % neuron #row: am i the lowlink?
                        flag=1;
                        COMPONENT = cell(2,1);    %create a container for one strongly connected component
                        p=1;                      %points to next available empty cell in container
                            if INSTACK(row) == 0  %if neuron #row is not present in the STACK
                                
                                COMPONENT{1,p}= row;     %put it in its own component
                                COMPONENT{2,p}= 0;
                                ADDED(row)=1;
                                totlonely=totlonely+1;
                            else

                                if FLAG(row)<1           %if neuron #row has no neighbors
                                    COMPONENT{1,p}= row; %put it in its own component
                                    COMPONENT{2,p}= 0;
                                    INSTACK(row) = 0;
                                    ADDED(row)=1;
                                    totlonely=totlonely+1;
                                else
                                    while (1)

                                          if j>1              %when j==1 the STACK is empty; cannot go below bottom cell
                                            j= j-1;
                                          end

                                        w1 = STACK{1,j};      % row of synapse on top of STACK 
                                        w2 = STACK{2,j};      % column of synpapse on top of STACK 
                                        INSTACK(w1) = INSTACK(w1)-1; %record this synapse was taken out of STACK
                                        STACK{1,j} = [];      % pop from stack
                                        STACK{2,j} = [];      % pop from stack

                                        %add popped synapse to current strongly connected component
                                        COMPONENT{1,p} = w1;
                                        ADDED(w1)=1;          %row of synapse is the neuron it leaves from, now in a component
                                        COMPONENT{2,p} = w2;

                                        p=p+1; 
                                        %stop popping when cycle is all ejected
                                          if w1 == row && INSTACK(w1) == 0  
                                            break;
                                          end
                                    end
                                end
                            end
                         CONTAINER = [CONTAINER,INTER,COMPONENT];   %embed this component in the container of all components 
                         totcomponents=totcomponents+1;
                         
                    end
                                           
                                    %find next descendant
                                    if j==1
                                        break
                                    end
                                    if q==1
                                        break
                                    end
                                    if flag==1                     %if neuron #row is not present in the STACK
                                        caller = SUCCESSORS{1,q-1};%backtrack 
                                        q=q-1;
                                        LOWLINK(caller) = min(LOWLINK(caller), LOWLINK(row));
                                            if j>1                 %when j==1 the STACK is empty
                                                j= j-1;
                                            end
                                        INSTACK(caller) = INSTACK(caller)-1;
                                        STACK{1,j} = [];           % pop from stack
                                        STACK{2,j} = [];           % pop from stack
                                        row = caller;              % go to the neuron you backtracked to
                                        
                                    else                          
                                        caller = SUCCESSORS{1,q-1};%backtrack
                                        q=q-1;
                                        LOWLINK(caller) = min(LOWLINK(caller), LOWLINK(row));
                                        row = caller;              % go to the neuron you backtracked to
                                    end
                                    
                                    
                end  
                end
                    
                
                
           end      
            if c==neur && ADDED(r)== 0         %if neuron #c has gone through all its neighbors and neuron #r is not part of any component
                        COMPONENT = cell(2,1); 
                        COMPONENT{1,1}= r;     %put neuron #r in its own component
                        COMPONENT{2,1}= 0;
                        ADDED(r)=1;
                        totlonely=totlonely+1;
                        INSTACK(r) = 0;        %record that neuron #r is not present in STACK
                        CONTAINER = [CONTAINER,INTER,COMPONENT];
                        totcomponents=totcomponents+1;
                        
            end
        end
        
      end
    
    end
    total(d,1)=totcomponents;
    totalsingles(d,1)=totlonely;
  end  %end nruns
  figure 
  hold on
  
  subplot(2,2,1);
  plot(total,'.');
  xlabel('runs');
  ylabel('strongly connected components')
  title('1000x1000 sparse, PARTIAL RANDOM adjacency matrix')
  hold on
  
  
  subplot(2,2,2);
  plot(totalsingles,'r.');
  xlabel('runs');
  ylabel('single-node components')
  title('1000x1000 sparse, PARTIAL RANDOM adjacency matrix')
  hold on
  
  
  %{
  % for visually comparing two different graphs uncomment this
  subplot(2,2,3);
  plot(total,'.');
  xlabel('runs');
  ylabel('strongly connected components')
  title('1000x1000 sparse, PARTIAL MOTIF adjacency matrix')
  hold on
  
  
  subplot(2,2,4);
  plot(totalsingles,'r.');
  xlabel('runs');
  ylabel('single-node components')
  title('1000x1000 sparse, PARTIAL MOTIF adjacency matrix')
  hold on
 %}
  
